--- dwm.c.orig	2013-07-11 01:12:38.836899074 -0400
+++ dwm.c	2013-07-11 22:04:57.025091409 -0400
@@ -123,6 +123,7 @@ struct Client {
 typedef struct {
 	int x, y, w, h;
 	XftColor colors[MAXCOLORS][ColLast];
+	XftColor plcolors[6][ColLast];
 	Drawable drawable;
 	GC gc;
 	struct {
@@ -218,7 +219,6 @@ static Monitor *dirtomon(int dir);
 static void drawbar(Monitor *m);
 static void drawbars(void);
 static void drawcoloredtext(char *text);
-static void drawsquare(Bool filled, Bool empty, XftColor col[ColLast]);
 static void drawtext(const char *text, XftColor col[ColLast], Bool pad);
 static void enternotify(XEvent *e);
 static void expose(XEvent *e);
@@ -852,6 +852,7 @@ drawbar(Monitor *m) {
 	char clock[38];
 	unsigned int i, occ = 0, urg = 0;
 	XftColor *col;
+	const char *sym;
 	Client *c;
 
 	resizebarwin(m);
@@ -863,20 +864,39 @@ drawbar(Monitor *m) {
 	dc.x = 0;
 	for(i = 0; i < LENGTH(tags); i++) {
 		dc.w = TEXTW(tags[i].name);
-		col = dc.colors[(m->tagset[m->seltags] & 1 << i) ? 1 : (urg & 1 << i ? 2 : 0)];
+		col = dc.colors[(m->tagset[m->seltags] & 1 << i) ? 1 : (urg & 1 << i ? 2 : (occ & 1 << i ? 3 : 0))];
 		drawtext(tags[i].name, col, True);
-		drawsquare(m == selmon && selmon->sel && selmon->sel->tags & 1 << i, occ & 1 << i, col);
+		dc.x += dc.w;
+
+		if(i == LENGTH(tags) - 1) {
+			sym = plclosedsym;
+			col = dc.plcolors[m->tagset[m->seltags] & 1 << i ? 4 : 3];
+		}
+		else {
+			sym = !(m->tagset[m->seltags] & 1 << i) ^ !(m->tagset[m->seltags] & 1 << (i + 1)) ? plclosedsym : plopensym;
+			col = dc.plcolors[m->tagset[m->seltags] & 1 << (i + 1) ? 1 : m->tagset[m->seltags] & 1 << i ? 2 : 0];
+		}
+		dc.w = textnw(sym, strlen(sym));
+		drawtext(sym, col, False);
 		dc.x += dc.w;
 	}
 	dc.w = blw = TEXTW(m->ltsymbol);
-	drawtext(m->ltsymbol, dc.colors[0], False);
+	drawtext(m->ltsymbol, dc.colors[4], True);
+	dc.x += dc.w;
+	dc.w = textnw(plopensym, strlen(plopensym));
+	drawtext(plopensym, dc.plcolors[3], False);
 	dc.x += dc.w;
 	x = dc.x;
 	if(m == selmon) { /* status is only drawn on selected monitor */
 		dc.w = textnw(stext, strlen(stext));
 		dc.x = m->ww - dc.w;
-		if(showsystray && m == selmon)
+		if(showsystray && m == selmon) {
 			dc.x -= getsystraywidth();
+			if(getsystraywidth() != 1)
+				dc.x -= textnw(plsystraysym, strlen(plsystraysym));
+			else
+				dc.x--;
+		}
 		if(dc.x < x) {
 			dc.x = x;
 			dc.w = m->ww - x;
@@ -890,10 +910,14 @@ drawbar(Monitor *m) {
 		strftime(clock, 38, clock_fmt, localtime(&current));
 		clockw = TEXTW(clock);
 		dc.x = x;
-		drawtext(NULL, dc.colors[0], False);
+		drawtext(NULL, dc.colors[4], False);
 		dc.w = MIN(dc.w, clockw);
 		dc.x = MAX(dc.x, (m->mw / 2) - (clockw / 2));
-		drawtext(clock, dc.colors[1], False);
+		drawtext(clock, dc.colors[5], False);
+	}
+	if(getsystraywidth() != 1) {
+		dc.x = m->ww - getsystraywidth() - textnw(plsystraysym, strlen(plsystraysym));
+		drawtext(plsystraysym, dc.plcolors[5], False);
 	}
 	XCopyArea(dpy, dc.drawable, m->barwin, dc.gc, 0, 0, m->ww, bh, 0, 0);
 	XSync(dpy, False);
@@ -934,18 +958,6 @@ drawcoloredtext(char *text) {
 }
 
 void
-drawsquare(Bool filled, Bool empty, XftColor col[ColLast]) {
-	int x;
-
-	XSetForeground(dpy, dc.gc, col[ColFG].pixel);
-	x = (dc.font.ascent + dc.font.descent + 2) / 4;
-	if(filled)
-		XFillRectangle(dpy, dc.drawable, dc.gc, dc.x+1, dc.y+1, x+1, x+1);
-	else if(empty)
-		XDrawRectangle(dpy, dc.drawable, dc.gc, dc.x+1, dc.y+1, x, x);
-}
-
-void
 drawtext(const char *text, XftColor col[ColLast], Bool pad) {
 	char buf[256];
 	int i, x, y, h, len, olen;
@@ -1822,7 +1834,7 @@ setup(void) {
 	initfont(font);
 	sw = DisplayWidth(dpy, screen);
 	sh = DisplayHeight(dpy, screen);
-	bh = dc.h = dc.font.height + 2;
+	bh = dc.h = dc.font.height;
 	updategeom();
 	/* init atoms */
 	wmatom[WMProtocols] = XInternAtom(dpy, "WM_PROTOCOLS", False);
@@ -1852,6 +1864,16 @@ setup(void) {
 		dc.colors[i][ColFG] = getcolor(colors[i][ColFG]);
 		dc.colors[i][ColBG] = getcolor(colors[i][ColBG]);
 	}
+	dc.plcolors[0][ColBorder] = getcolor(colors[0][ColBorder]);
+	dc.plcolors[0][ColFG] = getcolor(colors[0][ColFG]);
+	dc.plcolors[0][ColBG] = getcolor(colors[0][ColBG]);
+	int fg[5] = {0, 1, 3, 1, 6};
+	int bg[5] = {1, 0, 4, 4, 10};
+	for(int i = 0; i < 5; i++) {
+		dc.plcolors[i+1][ColBorder] = getcolor(colors[0][ColBorder]);
+		dc.plcolors[i+1][ColFG] = getcolor(colors[fg[i]][ColBG]);
+		dc.plcolors[i+1][ColBG] = getcolor(colors[bg[i]][ColBG]);
+	}
 	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
 	dc.gc = XCreateGC(dpy, root, 0, NULL);
 	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
@@ -2396,7 +2418,7 @@ updatesystray(void) {
 		wa.event_mask	     = ButtonPressMask | ExposureMask;
 		wa.override_redirect = True;
 		wa.background_pixmap = ParentRelative;
-		wa.background_pixel  = dc.colors[0][ColBG].pixel;
+		wa.background_pixel  = dc.colors[6][ColBG].pixel;
 		XSelectInput(dpy, systray->win, SubstructureNotifyMask);
 		XChangeProperty(dpy, systray->win, netatom[NetSystemTrayOrientation], XA_CARDINAL, 32,
 				PropModeReplace, (unsigned char *)&systrayorientation, 1);
@@ -2424,6 +2446,13 @@ updatesystray(void) {
 	}
 	w = w ? w + systrayspacing : 1;
 	x -= w;
+
+	if(w != 1)
+		wa.background_pixel = dc.colors[6][ColBG].pixel;
+	else
+		wa.background_pixel = dc.colors[0][ColBG].pixel;
+	XChangeWindowAttributes(dpy, systray->win, CWBackPixel, &wa);
+
 	XMoveResizeWindow(dpy, systray->win, x, selmon->by, w, bh);
 	XSync(dpy, False);
 }
